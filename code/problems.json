[
    {
        "title": "两数之和",
        "content": "给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。\n示例：nums = [2, 7, 11, 15], target = 9\n返回 [0, 1]",
        "answer": "[0,1]",
        "difficulty": 1,
        "category": "算法",
        "tags": "数组,哈希表",
        "test_cases": [
            {"input": [2, 7, 11, 15, 9], "output": [0, 1]},
            {"input": [3, 2, 4, 6], "output": [1, 2]},
            {"input": [3, 3, 6], "output": [0, 1]}
        ]
    },
    {
        "title": "回文数",
        "content": "判断一个整数是否是回文数。回文数是指正序和倒序读都是一样的整数。\n示例：121 是回文数，-121 不是",
        "answer": "true",
        "difficulty": 1,
        "category": "算法",
        "tags": "数学",
        "test_cases": [
            {"input": 121, "output": true},
            {"input": -121, "output": false},
            {"input": 10, "output": false}
        ]
    },
    {
        "title": "罗马数字转整数",
        "content": "给定一个罗马数字，将其转换成整数。\n示例：输入: \"III\" 输出: 3\n输入: \"IV\" 输出: 4\n输入: \"IX\" 输出: 9",
        "answer": "3",
        "difficulty": 1,
        "category": "算法",
        "tags": "字符串",
        "test_cases": [
            {"input": "III", "output": 3},
            {"input": "IV", "output": 4},
            {"input": "IX", "output": 9}
        ]
    },
    {
        "title": "最长回文子串",
        "content": "给定一个字符串 s，找到 s 中最长的回文子串。\n示例：输入 \"babad\"，输出 \"bab\" 或 \"aba\"",
        "answer": "bab",
        "difficulty": 2,
        "category": "算法",
        "tags": "字符串,动态规划",
        "test_cases": [
            {"input": "babad", "output": "bab"},
            {"input": "cbbd", "output": "bb"},
            {"input": "a", "output": "a"}
        ]
    },
    {
        "title": "盛最多水的容器",
        "content": "给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai)。找出其中的两条线，使它们与 x 轴共同构成的容器可以容纳最多的水。\n示例：输入 [1,8,6,2,5,4,8,3,7] 输出：49",
        "answer": "49",
        "difficulty": 2,
        "category": "算法",
        "tags": "数组,双指针",
        "test_cases": [
            {"input": [1,8,6,2,5,4,8,3,7], "output": 49},
            {"input": [1,1], "output": 1},
            {"input": [4,3,2,1,4], "output": 16}
        ]
    },
    {
        "title": "三数之和",
        "content": "给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0。请找出所有满足条件且不重复的三元组。",
        "answer": "[[-1,-1,2],[-1,0,1]]",
        "difficulty": 2,
        "category": "算法",
        "tags": "数组,双指针",
        "test_cases": [
            {"input": [-1,0,1,2,-1,-4], "output": [[-1,-1,2],[-1,0,1]]},
            {"input": [0,0,0], "output": [[0,0,0]]},
            {"input": [-2,0,1,1,2], "output": [[-2,0,2],[-2,1,1]]}
        ]
    },
    {
        "title": "正则表达式匹配",
        "content": "给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。\n'.' 匹配任意单个字符\n'*' 匹配零个或多个前面的那一个元素",
        "answer": "true",
        "difficulty": 3,
        "category": "算法",
        "tags": "字符串,动态规划",
        "test_cases": [
            {"input": ["aa", "a*"], "output": true},
            {"input": ["ab", ".*"], "output": true},
            {"input": ["mississippi", "mis*is*p*."], "output": false}
        ]
    },
    {
        "title": "寻找两个正序数组的中位数",
        "content": "给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的中位数。",
        "answer": "2.0",
        "difficulty": 3,
        "category": "算法",
        "tags": "数组,二分查找",
        "test_cases": [
            {"input": [[1,3], [2]], "output": 2.0},
            {"input": [[1,2], [3,4]], "output": 2.5},
            {"input": [[0,0], [0,0]], "output": 0.0}
        ]
    },
    {
        "title": "最长有效括号",
        "content": "给你一个只包含 '(' 和 ')' 的字符串，找出最长有效（格式正确且连续）括号子串的长度。",
        "answer": "4",
        "difficulty": 3,
        "category": "算法",
        "tags": "字符串,动态规划",
        "test_cases": [
            {"input": ")()())", "output": 4},
            {"input": "(()", "output": 2},
            {"input": "", "output": 0}
        ]
    },
    {
        "title": "合并两个有序链表",
        "content": "将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",
        "answer": "[1,1,2,3,4,4]",
        "difficulty": 1,
        "category": "数据结构",
        "tags": "链表",
        "test_cases": [
            {"input": [[1,2,4], [1,3,4]], "output": [1,1,2,3,4,4]},
            {"input": [[], []], "output": []},
            {"input": [[], [0]], "output": [0]}
        ]
    },
    {
        "title": "反转链表",
        "content": "给你单链表的头节点 head，请你反转链表，并返回反转后的链表。",
        "answer": "[5,4,3,2,1]",
        "difficulty": 1,
        "category": "数据结构",
        "tags": "链表",
        "test_cases": [
            {"input": [1,2,3,4,5], "output": [5,4,3,2,1]},
            {"input": [1,2], "output": [2,1]},
            {"input": [], "output": []}
        ]
    },
    {
        "title": "二叉树的层序遍历",
        "content": "给你一个二叉树，请你返回其按层序遍历得到的节点值。（即逐层地，从左到右访问所有节点）。",
        "answer": "[[3],[9,20],[15,7]]",
        "difficulty": 2,
        "category": "数据结构",
        "tags": "二叉树",
        "test_cases": [
            {"input": [3,9,20,null,null,15,7], "output": [[3],[9,20],[15,7]]},
            {"input": [1], "output": [[1]]},
            {"input": [], "output": []}
        ]
    },
    {
        "title": "线性回归",
        "content": "实现一个简单的线性回归模型，使用梯度下降法优化参数。\n给定数据集 X 和标签 y，返回训练后的模型参数 w 和 b。",
        "answer": "[w, b]",
        "difficulty": 2,
        "category": "机器学习",
        "tags": "回归,梯度下降",
        "test_cases": [
            {
                "input": {
                    "X": [[1], [2], [3], [4], [5]],
                    "y": [2, 4, 6, 8, 10]
                },
                "output": [2.0, 0.0]
            },
            {
                "input": {
                    "X": [[1], [2], [3], [4], [5]],
                    "y": [3, 5, 7, 9, 11]
                },
                "output": [2.0, 1.0]
            }
        ]
    },
    {
        "title": "主成分分析",
        "content": "实现主成分分析（PCA）算法，将给定的数据集降维到 k 维。\n给定数据集 X 和目标维度 k，返回降维后的数据。",
        "answer": "降维后的数据",
        "difficulty": 3,
        "category": "机器学习",
        "tags": "降维,PCA",
        "test_cases": [
            {
                "input": {
                    "X": [[1, 2], [2, 3], [3, 4], [4, 5]],
                    "k": 1
                },
                "output": "降维后的数据"
            },
            {
                "input": {
                    "X": [[1, 2], [2, 3], [3, 4], [4, 5]],
                    "k": 2
                },
                "output": "降维后的数据"
            }
        ]
    },
    {
        "title": "K均值聚类",
        "content": "实现K均值聚类算法，将给定的数据集划分为k个簇。给定数据集X和簇数k，返回每个样本所属的簇标签。",
        "answer": "簇标签",
        "difficulty": 3,
        "category": "机器学习",
        "tags": "聚类,无监督学习",
        "test_cases": [
            {
                "input": {
                    "X": [[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]],
                    "k": 2
                },
                "output": [0, 0, 0, 1, 1, 1]
            },
            {
                "input": {
                    "X": [[1, 2], [2, 3], [3, 4], [4, 5]],
                    "k": 3
                },
                "output": "簇标签"
            }
        ]
    },
    {
        "title": "决策树分类",
        "content": "实现决策树分类算法，使用信息增益作为划分标准。\n给定数据集X和标签y，返回训练好的决策树模型。",
        "answer": "决策树模型",
        "difficulty": 3,
        "category": "机器学习",
        "tags": "分类,决策树",
        "test_cases": [
            {
                "input": {
                    "X": [[1, 1], [1, 0], [0, 1], [0, 0]],
                    "y": [1, 1, 0, 0]
                },
                "output": "决策树模型"
            },
            {
                "input": {
                    "X": [[1, 2], [2, 3], [3, 4], [4, 5]],
                    "y": [0, 0, 1, 1]
                },
                "output": "决策树模型"
            }
        ]
    },
    {
        "title": "支持向量机",
        "content": "实现线性支持向量机分类器，使用梯度下降法优化参数。\n给定数据集X和标签y，返回训练后的模型参数w和b。",
        "answer": "[w, b]",
        "difficulty": 3,
        "category": "机器学习",
        "tags": "分类,SVM",
        "test_cases": [
            {
                "input": {
                    "X": [[1, 2], [2, 3], [3, 4], [4, 5]],
                    "y": [0, 0, 1, 1]
                },
                "output": "[w, b]"
            },
            {
                "input": {
                    "X": [[1, 1], [1, 0], [0, 1], [0, 0]],
                    "y": [1, 1, 0, 0]
                },
                "output": "[w, b]"
            }
        ]
    },
    {
        "title": "二叉树的最大深度",
        "content": "给定一个二叉树，找出其最大深度。\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。",
        "answer": "3",
        "difficulty": 2,
        "category": "数据结构",
        "tags": "二叉树,递归",
        "test_cases": [
            {
                "input": {
                    "root": [3,9,20,null,null,15,7]
                },
                "output": 3
            },
            {
                "input": {
                    "root": [1,null,2]
                },
                "output": 2
            }
        ]
    },
    {
        "title": "二叉树的层序遍历",
        "content": "给定一个二叉树，返回其节点值的层序遍历结果。\n（即逐层地，从左到右访问所有节点）。",
        "answer": "[[3],[9,20],[15,7]]",
        "difficulty": 2,
        "category": "数据结构",
        "tags": "二叉树,广度优先搜索",
        "test_cases": [
            {
                "input": {
                    "root": [3,9,20,null,null,15,7]
                },
                "output": [[3],[9,20],[15,7]]
            },
            {
                "input": {
                    "root": [1]
                },
                "output": [[1]]
            }
        ]
    },
    {
        "title": "验证二叉搜索树",
        "content": "给定一个二叉树，判断其是否是一个有效的二叉搜索树。\n假设一个二叉搜索树具有如下特征：\n- 节点的左子树只包含小于当前节点的数\n- 节点的右子树只包含大于当前节点的数\n- 所有左子树和右子树自身必须也是二叉搜索树",
        "answer": "true",
        "difficulty": 3,
        "category": "数据结构",
        "tags": "二叉树,递归",
        "test_cases": [
            {
                "input": {
                    "root": [2,1,3]
                },
                "output": true
            },
            {
                "input": {
                    "root": [5,1,4,null,null,3,6]
                },
                "output": false
            }
        ]
    },
    {
        "title": "反转链表",
        "content": "给定单链表的头节点 head，请反转链表，并返回反转后的链表。",
        "answer": "[5,4,3,2,1]",
        "difficulty": 2,
        "category": "数据结构",
        "tags": "链表,指针",
        "test_cases": [
            {
                "input": {
                    "head": [1,2,3,4,5]
                },
                "output": [5,4,3,2,1]
            },
            {
                "input": {
                    "head": [1,2]
                },
                "output": [2,1]
            }
        ]
    },
    {
        "title": "合并两个有序链表",
        "content": "将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",
        "answer": "[1,1,2,3,4,4]",
        "difficulty": 2,
        "category": "数据结构",
        "tags": "链表,双指针",
        "test_cases": [
            {
                "input": {
                    "l1": [1,2,4],
                    "l2": [1,3,4]
                },
                "output": [1,1,2,3,4,4]
            },
            {
                "input": {
                    "l1": [],
                    "l2": [0]
                },
                "output": [0]
            }
        ]
    },
    {
        "title": "快速排序",
        "content": "实现快速排序算法，对给定的整数数组进行排序。",
        "answer": "[1,2,3,4,5]",
        "difficulty": 3,
        "category": "算法设计",
        "tags": "排序,分治",
        "test_cases": [
            {
                "input": [5,3,1,4,2],
                "output": [1,2,3,4,5]
            },
            {
                "input": [9,8,7,6,5],
                "output": [5,6,7,8,9]
            }
        ]
    },
    {
        "title": "归并排序",
        "content": "实现归并排序算法，对给定的整数数组进行排序。",
        "answer": "[1,2,3,4,5]",
        "difficulty": 3,
        "category": "算法设计",
        "tags": "排序,分治",
        "test_cases": [
            {
                "input": [5,3,1,4,2],
                "output": [1,2,3,4,5]
            },
            {
                "input": [9,8,7,6,5],
                "output": [5,6,7,8,9]
            }
        ]
    },
    {
        "title": "二分查找",
        "content": "实现二分查找算法，在有序数组中查找目标值，返回其索引，若不存在则返回-1。",
        "answer": "2",
        "difficulty": 2,
        "category": "算法设计",
        "tags": "查找,二分",
        "test_cases": [
            {
                "input": {
                    "nums": [1,2,3,4,5],
                    "target": 3
                },
                "output": 2
            },
            {
                "input": {
                    "nums": [1,2,3,4,5],
                    "target": 6
                },
                "output": -1
            }
        ]
    },
    {
        "title": "动态规划-爬楼梯",
        "content": "假设你正在爬楼梯。需要n阶你才能到达楼顶。每次你可以爬1或2个台阶。你有多少种不同的方法可以爬到楼顶呢？",
        "answer": "3",
        "difficulty": 2,
        "category": "算法设计",
        "tags": "动态规划",
        "test_cases": [
            {
                "input": 2,
                "output": 2
            },
            {
                "input": 3,
                "output": 3
            }
        ]
    },
    {
        "title": "广度优先搜索",
        "content": "实现广度优先搜索算法，遍历给定的二叉树，返回节点值的层序遍历结果。",
        "answer": "[[1],[2,3],[4,5]]",
        "difficulty": 3,
        "category": "算法设计",
        "tags": "搜索,树",
        "test_cases": [
            {
                "input": [1,2,3,4,5],
                "output": [[1],[2,3],[4,5]]
            },
            {
                "input": [1,null,2,3],
                "output": [[1],[2],[3]]
            }
        ]
    }
    

]
